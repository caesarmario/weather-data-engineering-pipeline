####
## Airflow v3 DAG for backfill purposes only (trigger dag from 01 and rest)
## Mario Caesar // caesarmario87@gmail.com
####

from airflow import DAG
from airflow.sdk import Variable
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.macros import ds_add

from datetime import datetime, timedelta
import subprocess

# Variables
job_name        = "weather_trigger_backfill"

# Default args
default_args = {
    "owner"           : "caesarmario87@gmail.com",
    "depends_on_past" : False,
    "retries"         : 1,
    "retry_delay"     : timedelta(minutes=5),
    "max_active_runs" : 1,
}

# Python functions
def run_backfill(**kwargs):
        """
        Build CLI command using ds/conf and call external backfill_trigger_script.py
        """
        ds         = kwargs["ds"]
        conf       = kwargs["dag_run"].conf or {}
        start_date = conf.get("start_date", ds)
        end_date   = conf.get("end_date",   ds_add(ds, 1))

        cmd = [
            "python", "backfill_trigger_dag.py",
            "--start-date", start_date,
            "--end-date",   end_date,
            "--dag-id",     "01_dag_weather_generate_json_daily",
        ]

        # Log the exact command for traceability
        print(f"[run_backfill] Executing: {' '.join(cmd)}")

        # Execute and fail the task if the script errors out
        subprocess.run(cmd, check=True)


# Define DAGs
dag = DAG(
    dag_id          = "99_dag_weather_trigger_backfill",
    default_args    = default_args,
    schedule        = None,
    catchup         = False,
    tags            = ["backfill", "weather_data_engineering"],
)

# Dummy Start
task_start = EmptyOperator(
    task_id         = "task_start",
    dag             = dag
)
    
# Task to backfill
trigger_backfill = PythonOperator(
    task_id         = "trigger_backfill_via_python",
    python_callable = run_backfill,
    dag             = dag
)

# Dummy End
task_end = EmptyOperator(
    task_id         = "task_end",
    dag             = dag
)

# Define task dependencies
task_start >> trigger_backfill >> task_end