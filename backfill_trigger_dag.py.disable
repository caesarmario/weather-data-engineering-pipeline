####
## Python script for running backfill purposes (related to 99_dag_weather_trigger_backfill dag)
## Mario Caesar // caesarmario87@gmail.com
####

# Importing Libraries
from datetime import datetime, timedelta

import requests
import argparse
import sys
import json
import subprocess

from utils.logging_utils import logger

# Functions
def trigger_dag_run(dag_id: str, exec_date: str, *args, **kwargs):
    """
    Trigger via the Airflow CLI, passing exec_date in conf.
    """
    cmd = [
        "airflow", "dags", "trigger",
        dag_id,
        "--conf", json.dumps({"exec_date": exec_date})
    ]

    subprocess.run(cmd, check=True)


def parse_args() -> argparse.Namespace:
    """
    Parse and validate command-line arguments.

    Returns:
        An argparse Namespace with parsed values.
    """
    parser = argparse.ArgumentParser(
        prog="backfill_trigger_dag.py",
        description="Loop over dates and trigger an Airflow DAG via REST API.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        "--start-date",
        required=True,
        help="Start date for backfill (YYYY-MM-DD, inclusive)"
    )
    parser.add_argument(
        "--end-date",
        required=True,
        help="End date for backfill (YYYY-MM-DD, inclusive)"
    )
    parser.add_argument(
        "--dag-id",
        default="01_dag_weather_generate_json_daily",
        help="Airflow DAG ID to trigger"
    )

    args = parser.parse_args()

    # Validate date formats
    try:
        args.start_date = datetime.strptime(args.start_date, "%Y-%m-%d").date()
        args.end_date = datetime.strptime(args.end_date, "%Y-%m-%d").date()
    except ValueError as err:
        logger.error("Invalid date format: %s", err)
        sys.exit(1)

    if args.end_date < args.start_date:
        logger.error("End date %s is earlier than start date %s", args.end_date, args.start_date)
        sys.exit(1)

    return args


def main() -> None:
    """
    Main entry point: iterate through date range and trigger the target DAG.
    """
    args = parse_args()
    current_date = args.start_date

    while current_date <= args.end_date:
        date_str = current_date.strftime("%Y-%m-%d")
        try:
            trigger_dag_run(
                dag_id=args.dag_id,
                exec_date=date_str
            )
        except subprocess.CalledProcessError as exc:
            logger.exception("CLI trigger failed for %s: %s", date_str, exc)
        finally:
            current_date += timedelta(days=1)


if __name__ == "__main__":
    main()